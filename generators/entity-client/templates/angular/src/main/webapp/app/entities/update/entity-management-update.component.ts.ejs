<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const hasValidationRule = fields.some(field =>
        field.fieldValidate && (
                field.fieldValidateRules.includes('required') ||
                field.fieldValidateRules.includes('minlength') ||
                field.fieldValidateRules.includes('maxlength') ||
                field.fieldValidateRules.includes('min') ||
                field.fieldValidateRules.includes('max') ||
                field.fieldValidateRules.includes('pattern')
        )
);
const hasRequiredRelationship = relationships.some(relationship => relationship.relationshipRequired);
const isValidatorsRequired = hasValidationRule || hasRequiredRelationship;
_%>
import { Component, <% if (relationships.filter(rel => !rel.cascade).length > 0) { %>OnInit, <% } %>Input, Output, EventEmitter<% if (fieldsContainImageBlob) { %>, ElementRef<% } %> } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import {
    FormGroup,
    FormControl,
<%_ if (entityContainsEmbeddableRelationship) { _%>
    FormArray,
<%_ } _%>
<%_ if (isValidatorsRequired) { _%>
    Validators,
<%_ } _%>
} from '@angular/forms';
import { Observable } from 'rxjs';
<%_ if (relationships.some(rel => rel.ownerSide === true)) { _%>
import { map } from 'rxjs/operators';
<%_ } _%>
<%_ if (fieldsContainInstant || fieldsContainZonedDateTime) { _%>
import * as dayjs from 'dayjs';
import { DATE_TIME_FORMAT } from 'app/config/input.constants';
<%_ } _%>

import { I<%= entityAngularName %> } from '../<%= entityFileName %>.model';
import { <%= entityAngularName %>Service } from '../service/<%= entityFileName %>.service';
<%_ if (fieldsContainBlob) { _%>
import { AlertError } from 'app/shared/alert/alert-error.model';
import { EventManager, EventWithContent } from 'app/core/util/event-manager.service';
import { DataUtils, FileLoadError } from 'app/core/util/data-util.service';
<%_ } _%>
<%_
Object.keys(differentRelationships).forEach(key => {
    if (differentRelationships[key].some(rel => rel.reference.owned)) {
        const uniqueRel = differentRelationships[key][0];
        if (uniqueRel.otherEntityAngularName !== entityAngularName) {
            if (isBuiltInUser(uniqueRel.otherEntityAngularName)) {
_%>
import { IUser } from 'app/entities/user/user.model';
import { UserService } from 'app/entities/user/user.service';
<%_
            } else {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.model';
import { <%= uniqueRel.otherEntityAngularName %>Service } from 'app/entities/<%= uniqueRel.otherEntityPath %>/service/<%= uniqueRel.otherEntityFileName %>.service';
<%_
            }
        }
    }
}); _%>
<%_ for (relationship of embeddableRelationships) { _%>
import { create<%= relationship.otherEntity.entityAngularName %>FormGroup } from 'app/entities/<%= relationship.otherEntityPath %>/update/<%= relationship.otherEntityFileName %>-update.component';
<%_ } _%>

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>-update',
    templateUrl: './<%= entityFileName %>-update.component.html'
})
export class <%= entityAngularName %>UpdateComponent <% if (relationships.filter(rel => !rel.cascade).length > 0) { %>implements OnInit <% } %>{
    @Output() <%= entityInstance %>Save: EventEmitter<I<%= entityAngularName %>> = new EventEmitter();
    @Output() <%= entityInstance %>Close: EventEmitter<any> = new EventEmitter();

    isSaving = false;

<%_ for (const relationshipsByEntityNeedingOptions of Object.values(differentRelationships).map(relationships => relationships.filter(rel => rel.ownerSide)).filter(relationships => relationships.length > 0)) { _%>
    <%_ const relationshipsWithCustomUniqueOptions = relationshipsByEntityNeedingOptions.filter(rel => rel.relationshipType === 'one-to-one' && rel.otherEntityName !== 'user'); _%>
    <%_ if (relationshipsByEntityNeedingOptions.length > relationshipsWithCustomUniqueOptions.length) { _%>
        <%_ const otherEntity = relationshipsByEntityNeedingOptions[0].otherEntity _%>
    <%= otherEntity.entityInstancePlural %>SharedCollection: I<%= otherEntity.entityAngularName %>[] = [];
    <%_ } _%>
    <%_ for (const relationship of relationshipsWithCustomUniqueOptions) { _%>
    <%= relationship.relationshipFieldNamePlural %>Collection: I<%= relationship.otherEntityAngularName %>[] = [];
    <%_ } _%>
<%_ } _%>

    lazyEditForm?: FormGroup;

    constructor(
        <%_ if (fieldsContainBlob) { _%>
        protected dataUtils: DataUtils,
        protected eventManager: EventManager,
        <%_ } _%>
        protected <%= entityInstance %>Service: <%= entityAngularName %>Service,
<%_
Object.keys(differentRelationships).forEach(key => {
    if (differentRelationships[key].some(rel => rel.relationshipType === 'many-to-one' || rel.relationshipType === 'one-to-one' && rel.ownerSide === true || rel.relationshipType === 'many-to-many' && rel.ownerSide === true)) {
        const uniqueRel = differentRelationships[key][0];
        if (uniqueRel.otherEntityAngularName !== entityAngularName) {
_%>
        protected <%= uniqueRel.otherEntityName %>Service: <%= uniqueRel.otherEntityAngularName %>Service,
<%_
        }
    }
});
_%>
        <%_ if (fieldsContainImageBlob) { _%>
        protected elementRef: ElementRef,
        <%_ } _%>
    ) {}

    @Input() set editForm(editForm: FormGroup) {
        this.lazyEditForm = editForm;
    }

    get editForm(): FormGroup {
        return this.lazyEditForm!;
    }

    @Input() set <%= entityInstance %>(<%= entityInstance %>: I<%= entityAngularName %>) {
        this.lazyEditForm = create<%= entityAngularName %>FormGroup(<%= entityInstance %>);
    }

<%_ if (relationships.filter(rel => rel.ownerSide).length > 0) { _%>

    ngOnInit(): void {
        this.loadRelationshipsOptions();
    }

    loadRelationshipsOptions(): void {
    <%_ for (const relationshipsByEntityNeedingOptions of Object.values(differentRelationships).map(relationships => relationships.filter(rel => rel.ownerSide)).filter(relationships => relationships.length > 0)) { _%>
        <%_ const relationshipsWithCustomUniqueOptions = relationshipsByEntityNeedingOptions.filter(rel => rel.relationshipType === 'one-to-one' && rel.otherEntityName !== 'user'); %>
        <%_ const relationshipsWithCustomSharedOptions = relationshipsByEntityNeedingOptions.filter(rel => !relationshipsWithCustomUniqueOptions.includes(rel)); %>
        <%_ const otherEntity = relationshipsByEntityNeedingOptions[0].otherEntity _%>
        <%_ if (relationshipsWithCustomSharedOptions.length > 0) { _%>
        this.<%= otherEntity.entityInstance %>Service
            .query()
            .pipe(map((res: HttpResponse<I<%= otherEntity.entityAngularName %>[]>) => res.body ?? []))
            .pipe(map((<%= otherEntity.entityInstancePlural %>: I<%= otherEntity.entityAngularName %>[]) => this.<%= otherEntity.entityInstance %>Service.add<%= otherEntity.entityAngularName %>ToCollectionIfMissing([
            <%_ for (const relationship of relationshipsWithCustomSharedOptions) { _%>
                <%_ if (relationship.collection) { _%>
                ...this.editForm.get('<%= relationship.reference.name %>')!.value,
                <%_ } else { _%>
                this.editForm.get('<%= relationship.reference.name %>')!.value,
                <%_ } _%>
            <%_ } _%>
            ], <%= otherEntity.entityInstancePlural %>)))
            .subscribe((<%= otherEntity.entityInstancePlural %>: I<%= otherEntity.entityAngularName %>[]) => (this.<%= otherEntity.entityInstancePlural %>SharedCollection = <%= otherEntity.entityInstancePlural %>));
        <%_ } _%>
        <%_ for (const relationship of relationshipsWithCustomUniqueOptions) { %>
            <%_ const relationshipIdGetter = `this.editForm.get(['${relationship.relationshipFieldName}', '${relationship.otherEntity.primaryKey.name}'])?.value`; _%>
            <%_ const filter = relationship.jpaMetamodelFiltering ? `'${relationship.otherEntityRelationshipName}Id.specified': 'false'` : `filter: '${relationship.otherEntityRelationshipName.toLowerCase()}-is-null'`; _%>

        this.<%= relationship.otherEntityName %>Service
            .query({<%- filter %>})
            .pipe(map((res: HttpResponse<I<%= relationship.otherEntityAngularName %>[]>) => res.body ?? []))
            .pipe(map((<%= otherEntity.entityInstancePlural %>: I<%= otherEntity.entityAngularName %>[]) => this.<%= otherEntity.entityInstance %>Service.add<%= otherEntity.entityAngularName %>ToCollectionIfMissing(this.editForm.get('<%= relationship.reference.name %>')!.value, <%= otherEntity.entityInstancePlural %>)))
            .subscribe((<%= otherEntity.entityInstancePlural %>: I<%= otherEntity.entityAngularName %>[]) => (this.<%= relationship.relationshipFieldNamePlural %>Collection = <%= otherEntity.entityInstancePlural %>));
        <%_ } _%>
    <%_ } _%>
    }
<%_ } _%>

    cancel(reason?: any): void {
        this.<%= entityInstance %>Close.emit(reason);
    }

<%_ if (fieldsContainBlob) { _%>
    byteSize(base64String: string): string {
        return this.dataUtils.byteSize(base64String);
    }

    openFile(base64String: string, contentType: string | null | undefined): void {
        this.dataUtils.openFile(base64String, contentType);
    }

    setFileData(event: Event, field: string, isImage: boolean): void {
        this.dataUtils.loadFileToForm(event, this.editForm, field, isImage).subscribe({
            error: (err: FileLoadError) =>
                this.eventManager.broadcast(
                    new EventWithContent<AlertError>('<%= frontendAppName %>.error', { <% if (enableTranslation) { %>...err, key: 'error.file.' + err.key<% } else { %>message: err.message<% } %> })
                )
        });
    }

    <%_ if (fieldsContainImageBlob) { _%>
    clearInputImage(field: string, fieldContentType: string, idInput: string): void {
        this.editForm.patchValue({
            [field]: null,
            [fieldContentType]: null
        });
        if (idInput && this.elementRef.nativeElement.querySelector('#' + idInput)) {
            this.elementRef.nativeElement.querySelector('#' + idInput).value = null;
        }
    }
    <%_ } _%>
<%_ } _%>

    save(): void {
        this.isSaving = true;
        const <%= entityInstance %> = this.editForm.value;
        if (<%= entityInstance %>.<%= primaryKey.name %> != null) {
            this.subscribeToSaveResponse(
                this.<%= entityInstance %>Service.update(<%= entityInstance %>));
        } else {
            this.subscribeToSaveResponse(
                this.<%= entityInstance %>Service.create(<%= entityInstance %>));
        }
    }

    protected subscribeToSaveResponse(result: Observable<HttpResponse<I<%= entityAngularName %>>>): void {
        result.subscribe(
            response => this.<%= entityInstance %>Save.emit(response.body!),
            error => this.<%= entityInstance %>Close.emit(error),
            () => {
                this.isSaving = false;
            }
        );
    }
    <%_ for (relationship of relationships.filter(rel => rel.reference.owned && rel.otherEntity.primaryKey)) { _%>
        <%_ const otherEntity = relationship.otherEntity; _%>

    get <%= relationship.relationshipName %>Updatable(): boolean {
        return this.editForm.get('<%= relationship.relationshipName %>')!.value.id == null || this.editForm.get('<%= relationship.relationshipName %>')!.dirty ? true : false;
    }
    <%_ } _%>
    <%_ for (relationshipsForEntity of Object.values(differentRelationships).filter(arr => arr.some(rel => rel.reference.owned && rel.otherEntity.primaryKey))) { _%>
        <%_ const otherEntity = relationshipsForEntity[0].otherEntity; %>

    track<%= otherEntity.entityAngularName %>By<%= otherEntity.primaryKey.nameCapitalized %>(index: number, item: I<%= otherEntity.entityAngularName %>): <%= getTypescriptKeyType(otherEntity.primaryKey.type) %> {
        return item.<%= otherEntity.primaryKey.name %><%= isBuiltInUser(otherEntity.entityAngularName) ? '' : '!' %>;
        return item.<%= otherEntity.primaryKey.name %>!;
    }

    <%_ } _%>
    <%_ for (reference of Object.values(differentRelationships).filter(arr => arr.some(rel => rel.relationshipType === 'many-to-many' && rel.reference.owned && rel.otherEntity.primaryKey)).map(arr => arr[0].reference)) { _%>

    getSelected<%= reference.relationship.otherEntity.entityAngularName %>(option: I<%= reference.relationship.otherEntity.entityAngularName %>, selectedVals?: I<%= reference.relationship.otherEntity.entityAngularName %>[]): I<%= reference.relationship.otherEntity.entityAngularName %> {
        if (selectedVals) {
          for (let i = 0; i < selectedVals.length; i++) {
              if (option.<%= reference.relationship.otherEntity.primaryKey.name %> === selectedVals[i].<%= reference.relationship.otherEntity.primaryKey.name %>) {
                  return selectedVals[i];
              }
          }
        }
        return option;
    }
    <%_ } _%>

<%_ for (relationship of embeddableRelationships) {
        if (relationship.relationshipType === 'one-to-many') { _%>
    add<%= relationship.relationshipNameCapitalized %>(): void {
        const formGroup = create<%= relationship.otherEntity.entityAngularName %>FormGroup({});
        // Disable backReference
        formGroup.get('<%= relationship.otherRelationship.relationshipName %>')!.disable();
        this.<%= relationship.relationshipName %>Forms.push(formGroup);
    }

    remove<%= relationship.relationshipNameCapitalized %>(index: number): void {
        this.<%= relationship.relationshipName %>Forms.removeAt(index);
    }

    get <%= relationship.relationshipName %>Forms(): FormArray {
        return this.editForm.get('<%= relationship.relationshipNamePlural %>') as FormArray;
    }

    get <%= relationship.relationshipName %>FormControls(): FormGroup[] {
        return this.<%= relationship.relationshipName %>Forms.controls as FormGroup[];
    }
<%_     }
    } _%>
}

<% if (embeddableEntity) { %>export <% } %>function create<%= entityAngularName %>FormGroup(<%= entityInstance %>?: I<%= entityAngularName %>): FormGroup {
    return new FormGroup({
<%_ for (field of fields) {
    const fieldName = field.fieldName;
    const fieldType = field.fieldType;
    const fieldTypeBlobContent = field.fieldTypeBlobContent;
_%>
        <%= fieldName %>: new FormControl(
        <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <%= entityInstance %>?.<%= fieldName %> ? <%= entityInstance %>?.<%= fieldName %>.format(DATE_TIME_FORMAT) : null
        <%_ } else { _%> 
            <%= entityInstance %>?.<%= fieldName _%>
        <%_ } _%> 
    <%_ if (field.fieldValidateRules && ['required', 'minlength', 'maxlength', 'min', 'max', 'pattern'].some(rule => field.fieldValidateRules.includes(rule))) { _%>
            ,[
        <%_ if (field.fieldValidateRules.includes('required')) { %>                Validators.required,<% } _%>
        <%_ if (field.fieldValidateRules.includes('minlength')) { %>                Validators.minLength(<%= field.fieldValidateRulesMinlength %>),<% } _%>
        <%_ if (field.fieldValidateRules.includes('maxlength')) { %>                Validators.maxLength(<%= field.fieldValidateRulesMaxlength %>),<% } _%>
        <%_ if (field.fieldValidateRules.includes('min')) { %>                Validators.min(<%= field.fieldValidateRulesMin %>),<% } _%>
        <%_ if (field.fieldValidateRules.includes('max')) { %>                Validators.max(<%= field.fieldValidateRulesMax %>),<% } _%>
        <%_ if (field.fieldValidateRules.includes('pattern')) { %>                Validators.pattern('<%= field.fieldValidateRulesPattern.replace(/\\/g, '\\\\') %>'),<% } %>
            ]
    <% } %>
        ),
    <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
        <%= fieldName %>ContentType: new FormControl(<%= entityInstance %>?.<%= fieldName %>ContentType),
    <%_ } _%>
<%_ } _%>
<%_ for (relationship of relationships.filter(rel => rel.reference.owned || rel.cascade)) {
const reference = relationship.reference;
const relationshipRequired = relationship.relationshipRequired;
_%>
    <%_ if (reference.collection && relationship.cascade) { %>
        <%= reference.name %>: new FormArray((<%= entityInstance %>?.<%= reference.name %> ?? []).map(<%= relationship.relationshipName %> => create<%= relationship.otherEntity.entityAngularName %>FormGroup(<%= relationship.relationshipName %>))),
    <%_ } else { %>
        <%= reference.name %>: new FormControl(<%= entityInstance %>?.<%= reference.name %><% if (relationshipRequired) { %>, Validators.required<% } %>),
    <%_ } %>
<%_ } _%>
    });
};
