<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const query = generateEntityQueries(relationships, entityInstance, dto);
const queries = query.queries;
const variables = query.variables;
const rxjsMapIsUsed = query.rxjsMapIsUsed;
const selectableEntities = query.selectableEntities;
const selectableManyToManyEntities = query.selectableManyToManyEntities;
_%>
import {
    Component,
    OnInit,
    <% if (fieldsContainImageBlob) { %>ElementRef,<% } %>
    Input,
} from '@angular/core';
import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
import {
    FormBuilder,
    FormGroup,
<%_ if (entityContainsEmbeddableRelationship) { _%>
    FormArray,
<%_ } _%>
} from '@angular/forms';
import { Observable } from 'rxjs';
<%_ if ( rxjsMapIsUsed ) { _%>
import { map } from 'rxjs/operators';
<%_ } _%>
<%_ if (fieldsContainInstant || fieldsContainZonedDateTime) { _%>
import * as dayjs from 'dayjs';
import { DATE_TIME_FORMAT } from 'app/config/input.constants';
<%_ } _%>

import { I<%= entityAngularName %>, <%= entityAngularName %>, <%= entityInstance %>FormGroupDefinition } from '../<%= entityFileName %>.model';
import { <%= entityAngularName %>Service } from '../service/<%= entityFileName %>.service';
<%_ if (fieldsContainBlob) { _%>
import { AlertError } from 'app/shared/alert/alert-error.model';
import { EventManager, EventWithContent } from 'app/core/util/event-manager.service';
import { DataUtils, FileLoadError } from 'app/core/util/data-util.service';
<%_ } _%>
<%_
Object.keys(differentRelationships).forEach(key => {
    if (differentRelationships[key].some(rel => rel.reference.owned)) {
        const uniqueRel = differentRelationships[key][0];
        if (uniqueRel.otherEntityAngularName !== entityAngularName) {
            if (isBuiltInUser(uniqueRel.otherEntityAngularName)) {
_%>
import { IUser } from 'app/core/user/user.model';
import { UserService } from 'app/core/user/user.service';
<%_
            } else {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.model';
import { <%= uniqueRel.otherEntityAngularName %>Service } from 'app/entities/<%= uniqueRel.otherEntityPath %>/service/<%= uniqueRel.otherEntityFileName %>.service';
<%_
            }
        }
    }
});
for (relationship of embeddableRelationships) {
    if (relationship.relationshipType === 'one-to-many') { _%>
import { <%= relationship.otherEntity.entityInstance %>FormGroupDefinition } from 'app/entities/<%= relationship.otherEntityPath %>/<%= relationship.otherEntityFileName %>.model';
<%_ }
}
_%>

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>-update',
    templateUrl: './<%= entityFileName %>-update.component.html'
})
export class <%= entityAngularName %>UpdateComponent implements OnInit {
    @Input() <%= entityInstance %>?: I<%= entityAngularName %>;

    @Input() embeddedForm = false;
    @Input() modal = false;
    isSaving = false;
    <%_ for (const idx in variables) { _%>
    <%- variables[idx] %>
    <%_ } _%>

    lazyEditForm?: FormGroup;

    onSuccess?: (response: HttpResponse<I<%= entityAngularName %>>) => void;
    onError?: (response: HttpErrorResponse) => void;
    cancel?: () => void;

    constructor(
        <%_ if (fieldsContainBlob) { _%>
        protected dataUtils: DataUtils,
        protected eventManager: EventManager,
        <%_ } _%>
        protected <%= entityInstance %>Service: <%= entityAngularName %>Service,
<%_
Object.keys(differentRelationships).forEach(key => {
    if (differentRelationships[key].some(rel => rel.relationshipType === 'many-to-one' || rel.relationshipType === 'one-to-one' && rel.ownerSide === true || rel.relationshipType === 'many-to-many' && rel.ownerSide === true)) {
        const uniqueRel = differentRelationships[key][0];
        if (uniqueRel.otherEntityAngularName !== entityAngularName) {
_%>
        protected <%= uniqueRel.otherEntityName %>Service: <%= uniqueRel.otherEntityAngularName %>Service,
<%_
        }
    }
});
_%>
        <%_ if (fieldsContainImageBlob) { _%>
        protected elementRef: ElementRef,
        <%_ } _%>
        private fb: FormBuilder,
    ) {}

    @Input() set editForm(editForm: FormGroup) {
        this.lazyEditForm = editForm;
    }

    get editForm(): FormGroup {
        if (this.lazyEditForm == null) {
            this.lazyEditForm = this.fb.group(
<%_ if (entityContainsEmbeddableRelationship) {  _%>
                {
                    ...<%= entityInstance %>FormGroupDefinition,
    <%_ for (relationship of embeddableRelationships) { _%>
                    <%= relationship.reference.name %>: this.fb.array([]),
    <%_ } _%>
                }
<%_ } else { _%>
                <%= entityInstance %>FormGroupDefinition
<%_ } _%>
            );
        }
        return this.lazyEditForm;
    }

    callCancel(): void {
        this.cancel?.();
    }

    ngOnInit(): void {
        if (this.<%= entityInstance %> != null) {
            this.updateForm(this.<%= entityInstance %>);
        }

        <%_ queries.forEach(query => { _%>
        <%- query %>
        <%_ }); _%>
    }

    updateForm(<%= entityInstance %>: I<%= entityAngularName %>): void {
<%_ for (relationship of embeddableRelationships) {
        if (relationship.relationshipType === 'one-to-many') { _%>
        this.<%= relationship.relationshipName %>Forms.clear();
        <%= entityInstance %>.<%= relationship.relationshipNamePlural %>.forEach(() => this.add<%= relationship.relationshipNameCapitalized %>());
<%_     }
    } _%>

        this.editForm.patchValue({
    <%_ for (idx in fields) {
        const fieldName = fields[idx].fieldName;
        const fieldType = fields[idx].fieldType;
        const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    _%>
        <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <%= fieldName %>: <%= entityInstance %>.<%= fieldName %> ? <%= entityInstance %>.<%= fieldName %>.format(DATE_TIME_FORMAT) : null,
        <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
            <%= fieldName %>: <%= entityInstance %>.<%= fieldName %>,
            <%= fieldName %>ContentType: <%= entityInstance %>.<%= fieldName %>ContentType,
        <%_ } else { _%>
            <%= fieldName %>: <%= entityInstance %>.<%= fieldName %>,
        <%_ } _%>
    <%_ } _%>
    <%_ for (idx in relationships) {
        const relationship = relationships[idx];
    _%>
        <%_ if (relationship.cascade) { _%>
            <%= relationship.reference.name %>: <%= entityInstance %>.<%= relationship.reference.name %>,
        <%_ } else if (relationship.reference.owned === true) { _%>
            <%= relationship.reference.name %>: <%= entityInstance %>.<%= relationship.reference.name %>,
        <%_ } _%>
    <%_ } _%>
        });
    }

<%_ if (fieldsContainBlob) { _%>
    byteSize(base64String: string): string {
        return this.dataUtils.byteSize(base64String);
    }

    openFile(base64String: string, contentType: string): void {
        this.dataUtils.openFile(base64String, contentType);
    }

    setFileData(event: Event, field: string, isImage: boolean): void {
        this.dataUtils.loadFileToForm(event, this.editForm, field, isImage).subscribe({
            error: (err: FileLoadError) =>
                this.eventManager.broadcast(
                    new EventWithContent<AlertError>('<%= frontendAppName %>.error', { <% if (enableTranslation) { %>...err, key: 'error.file.' + err.key<% } else { %>message: err.message<% } %> })
                )
        });
    }

    <%_ if (fieldsContainImageBlob) { _%>
    clearInputImage(field: string, fieldContentType: string, idInput: string): void {
        this.editForm.patchValue({
            [field]: null,
            [fieldContentType]: null
        });
        if (idInput && this.elementRef.nativeElement.querySelector('#' + idInput)) {
            this.elementRef.nativeElement.querySelector('#' + idInput).value = null;
        }
    }
    <%_ } _%>
<%_ } _%>

    save(): void {
        this.isSaving = true;
        const <%= entityInstance %> = this.createFromForm();
        if (<%= entityInstance %>.<%= primaryKey.name %> !== undefined) {
            this.subscribeToSaveResponse(
                this.<%= entityInstance %>Service.update(<%= entityInstance %>));
        } else {
            this.subscribeToSaveResponse(
                this.<%= entityInstance %>Service.create(<%= entityInstance %>));
        }
    }

    private createFromForm(): I<%= entityAngularName %> {
        return {
            ...new <%= entityAngularName %>(),
    <%_ for (idx in fields) {
        const fieldName = fields[idx].fieldName;
        const fieldType = fields[idx].fieldType;
        const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    _%>
        <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <%= fieldName %>: this.editForm.get(['<%= fieldName %>'])!.value ? dayjs(this.editForm.get(['<%= fieldName %>'])!.value, DATE_TIME_FORMAT) : undefined,
        <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
            <%= fieldName %>ContentType: this.editForm.get(['<%= fieldName %>ContentType'])!.value,
            <%= fieldName %>: this.editForm.get(['<%= fieldName %>'])!.value,
        <%_ } else { _%>
            <%= fieldName %>: this.editForm.get(['<%= fieldName %>'])!.value,
        <%_ } _%>
    <%_ } _%>
    <%_ for (idx in relationships) {
        const relationship = relationships[idx];
        const relationshipType = relationships[idx].relationshipType;
        const ownerSide = relationships[idx].ownerSide;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
    _%>
        <%_ if (relationship.reference.owned === true || relationship.cascade) { _%>
            <%= relationship.reference.name %>: this.editForm.get(['<%= relationship.reference.name %>'])!.value,
        <%_ } _%>
    <%_ } _%>
        };
    }

    protected subscribeToSaveResponse(result: Observable<HttpResponse<I<%= entityAngularName %>>>): void {
        result.subscribe(
            response => this.onSuccess?.(response),
            error => this.onError?.(error),
            () => {
                this.isSaving = false;
            }
        );
    }
    <%_ for (reference of Object.values(differentRelationships).filter(arr => arr.some(rel => rel.reference.owned && rel.otherEntity.primaryKey)).map(arr => arr[0].reference)) { _%>

    track<%= reference.relationship.otherEntity.entityAngularName %>By<%= reference.relationship.otherEntity.primaryKey.nameCapitalized %>(index: number, item: I<%= reference.relationship.otherEntity.entityAngularName %>): <%= getTypescriptKeyType(reference.relationship.otherEntity.primaryKey.type) %> {
        return item.<%= reference.relationship.otherEntity.primaryKey.name %>!;
    }
    <%_ } _%>
    <%_ for (reference of Object.values(differentRelationships).filter(arr => arr.some(rel => rel.relationshipType === 'many-to-many' && rel.reference.owned && rel.otherEntity.primaryKey)).map(arr => arr[0].reference)) { _%>

    getSelected<%= reference.relationship.otherEntity.entityAngularName %>(option: I<%= reference.relationship.otherEntity.entityAngularName %>, selectedVals?: I<%= reference.relationship.otherEntity.entityAngularName %>[]): I<%= reference.relationship.otherEntity.entityAngularName %> {
        if (selectedVals) {
          for (let i = 0; i < selectedVals.length; i++) {
              if (option.<%= reference.relationship.otherEntity.primaryKey.name %> === selectedVals[i].<%= reference.relationship.otherEntity.primaryKey.name %>) {
                  return selectedVals[i];
              }
          }
        }
        return option;
    }
    <%_ } _%>

<%_ for (relationship of embeddableRelationships) {
        if (relationship.relationshipType === 'one-to-many') { _%>
    add<%= relationship.relationshipNameCapitalized %>(): void {
        const formGroup = this.fb.group(<%= relationship.otherEntity.entityInstance %>FormGroupDefinition);
        // Disable backReference
        formGroup.get('<%= relationship.otherRelationship.relationshipName %>')?.disable();
        this.<%= relationship.relationshipName %>Forms.push(formGroup);
    }

    remove<%= relationship.relationshipNameCapitalized %>(index: number): void {
        this.<%= relationship.relationshipName %>Forms.removeAt(index);
    }

    get <%= relationship.relationshipName %>Forms(): FormArray {
        return this.editForm.get('<%= relationship.relationshipNamePlural %>') as FormArray;
    }

    get <%= relationship.relationshipName %>FormControls(): FormGroup[] {
        return this.<%= relationship.relationshipName %>Forms.controls as FormGroup[];
    }
<%_     }
    } _%>
}
