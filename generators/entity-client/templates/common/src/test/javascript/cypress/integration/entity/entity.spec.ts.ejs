import { entityItemSelector } from '../../support/commands';
import {
  entityTableSelector,
  entityDetailsButtonSelector,
  entityDetailsBackButtonSelector,
  <%_ if (!readOnly) { _%>
  entityCreateButtonSelector,
  entityCreateSaveButtonSelector,
  entityCreateCancelButtonSelector,
  entityEditButtonSelector,
  entityDeleteButtonSelector,
  entityConfirmDeleteButtonSelector,
  <%_ } _%>
} from '../../support/entity';
<%_

const baseApi = (applicationTypeGateway && locals.microserviceName) ? 'services/' + microserviceName.toLowerCase() + '/api/' : 'api/';

const entityFakeData = generateFakeData('cypress');
const requiredRelationships = relationships.filter(rel => rel.relationshipRequired || rel.id);
const requiredOtherEntities = requiredRelationships.map(rel => rel.otherEntity);
const otherEntities = Object.values(differentRelationships).map(rels => rels[0].otherEntity).filter(entity => !requiredOtherEntities.includes(entity));
// We cannot generate a required entity with required relationship.
const skipCreateTest = (requiredRelationships.length > 0 || !entityFakeData) ? '.skip' : '';
// const skipCreateTest = (requiredRelationships.map(rel => rel.otherEntity.relationships).flat().some(rel => rel.relationshipRequired || rel.id) || !entityFakeData) ? '.skip' : '';
_%>

describe('<%= entityClass %> e2e test', () => {

  const <%= entityInstance %>PageUrl = '/<%= entityUrl %>';
  const <%= entityInstance %>PageUrlPattern = new RegExp('/<%= entityUrl %>(\\?.*)?$');
  const username = Cypress.env('E2E_USERNAME') ?? 'admin';
  const password = Cypress.env('E2E_PASSWORD') ?? 'admin';

<%_ if (authenticationTypeOauth2) { _%>
  beforeEach(() => {
    cy.getOauth2Data();
    cy.get('@oauth2Data').then(oauth2Data => {
      cy.oauthLogin(oauth2Data, username, password);
    });
    cy.intercept('GET', '/<%= baseApi + entityApiUrl %>').as('entitiesRequest');
    cy.visit('');
    cy.get(entityItemSelector).should('exist');
  });

  beforeEach(() => {
    Cypress.Cookies.preserveOnce('session_id');
  })

  afterEach(() => {
    cy.oauthLogout();
    cy.clearCache();
  });
<%_ } else { _%>
  before(() => {
    cy.window().then((win) => {
      win.sessionStorage.clear()
    });
    cy.visit('');
    cy.login(username, password);
    cy.get(entityItemSelector).should('exist');
  });
<%_ } _%>

  beforeEach(() => {
    cy.intercept('GET', '/<%= baseApi + entityApiUrl %>+(?*|)').as('entitiesRequest');
    cy.intercept('POST', '/<%= baseApi + entityApiUrl %>').as('postEntityRequest');
    cy.intercept('DELETE', '/<%= baseApi + entityApiUrl %>/*').as('deleteEntityRequest');
<%_ for (otherEntity of otherEntities) { _%>
    cy.intercept('GET', '/<%= baseApi + otherEntity.entityApiUrl %>', {
      statusCode: 200,
      body: [],
    });
<%_ } _%>
  });

  it('<%= entityClassPlural %> menu click should load <%= entityClassPlural %> page', () => {
    cy.visit('/');
    cy.clickOnEntityMenuItem('<%= entityStateName %>');
    cy.wait('@entitiesRequest').then(({ response }) => {
      if (response.body.length === 0) {
        cy.get(entityTableSelector).should('not.exist');
      } else {
        cy.get(entityTableSelector).should('exist');
      }
    });;
    cy.getEntityHeading('<%= entityClass %>').should('exist');
    cy.url().should('match', <%= entityInstance %>PageUrlPattern);
  });

  describe('<%= entityClass %> page', () => {
<%_ if (!readOnly) { _%>
    describe('buttons', () => {
      beforeEach(() => {
        cy.visit(<%= entityInstance %>PageUrl);
        cy.wait('@entitiesRequest');
      });

      it('create button click should load create <%= entityClass %> page', () => {
        cy.get(entityCreateButtonSelector).click({force: true});
        cy.url().should('match', new RegExp('/<%= entityUrl %>/new$'));
        cy.getEntityCreateUpdateHeading('<%= entityClass %>');
        cy.get(entityCreateSaveButtonSelector).should('exist');
        cy.get(entityCreateCancelButtonSelector).click({force: true});
        cy.wait('@entitiesRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(200);
        });
        cy.url().should('match', <%= entityInstance %>PageUrlPattern);
      });
    });

<%_ } _%>
    describe('when a registry exists', () => {
      let nrItems;
      beforeEach(() => {
        cy.visit(<%= entityInstance %>PageUrl);
        cy.wait('@entitiesRequest').then(({ response }) => {
          nrItems = response.body.length;
          if (nrItems === 0) {
            this.skip();
          }
        });
      });

      it('detail button click should load details <%= entityClass %> page', function() {
        cy.get(entityDetailsButtonSelector).first().click({force: true});
        cy.getEntityDetailsHeading('<%= entityInstance %>');
        cy.get(entityDetailsBackButtonSelector).click({force: true});
        cy.wait('@entitiesRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(200);
        });
        cy.url().should('match', <%= entityInstance %>PageUrlPattern);
      });

<%_ if (!readOnly) { _%>
      it('edit button click should load edit <%= entityClass %> page', function() {
        cy.get(entityEditButtonSelector).first().click({force: true});
        cy.getEntityCreateUpdateHeading('<%= entityClass %>');
        cy.get(entityCreateSaveButtonSelector).should('exist');
        cy.get(entityCreateCancelButtonSelector).click({force: true});
        cy.wait('@entitiesRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(200);
        });
        cy.url().should('match', <%= entityInstance %>PageUrlPattern);
      });

      it<%= skipCreateTest %>('last delete button click should delete instance of <%= entityClass %>', function() {
  <%_ if (clientFrameworkReact) { _%>
        cy.intercept('GET', '/<%= baseApi + entityApiUrl %>/*').as('dialogDeleteRequest');
  <%_ } _%>
        cy.get(entityTableSelector).should('have.lengthOf', nrItems);
        cy.get(entityDeleteButtonSelector).last().click({force: true});
  <%_ if (clientFrameworkReact) { _%>
        cy.wait('@dialogDeleteRequest');
  <%_ } _%>
        cy.getEntityDeleteDialogHeading('<%= entityInstance %>').should('exist');
        cy.get(entityConfirmDeleteButtonSelector).click({force: true});
        cy.wait('@deleteEntityRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(204);
        });
        cy.wait('@entitiesRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(200);
        });
        cy.url().should('match', <%= entityInstance %>PageUrlPattern);
      });
<%_ } _%>
    });
  });
<%_ if (!readOnly) { _%>

  describe('new <%= entityClass %> page', () => {
    let created<%= entityClass %>: any;
  <%_ if (requiredRelationships.length > 0) { _%>
    <%_ for (relationship of requiredRelationships) { _%>
    let <%= relationship.relationshipName %>;
    <%_ } _%>

    beforeEach(() => {
    <%_ for (relationship of requiredRelationships) { _%>
      // create an entity at the relationship entity:
      cy.request({
        method: 'POST',
        url: '/<%= baseApi + relationship.otherEntity.entityApiUrl %>',
        body: <%- JSON.stringify(generateTestEntity(relationship.otherEntity.fields.filter(f => !f.autoGenerate).map(field => field.reference))) %>,
      <%_ if (authenticationTypeJwt) { _%>
        auth: {
          bearer: JSON.parse(sessionStorage.getItem(Cypress.env('jwtStorageName')))
        },
      <%_ } _%>
      }).then(response => {
        <%= relationship.relationshipName %> = response.body;
      });
    <%_ } _%>
      cy.visit(`${<%= entityInstance %>PageUrlPattern}/new`);
    })
  <%_ } _%>

    afterEach(() => {
      if (created<%= entityClass %>) {
        cy.request({
          method: 'DELETE',
          url: `/<%= baseApi + entityApiUrl %>/${created<%= entityClass %>.<%= primaryKey.name %>}`,
  <%_ if (authenticationTypeJwt) { _%>
          auth: {
            bearer: JSON.parse(sessionStorage.getItem(Cypress.env('jwtStorageName')))
          },
  <%_ } _%>
        }).then(response => {
          expect(response.status).to.equal(204);
        });
      }
  <%_ for (relationship of requiredRelationships) { _%>
      cy.request({
        method: 'DELETE',
        url: `/<%= baseApi + relationship.otherEntity.entityApiUrl %>/${<%= relationship.relationshipName %>.<%= relationship.otherEntity.primaryKey.name %>}`,
    <%_ if (authenticationTypeJwt) { _%>
        auth: {
          bearer: JSON.parse(sessionStorage.getItem(Cypress.env('jwtStorageName')))
        },
    <%_ } _%>
      });
  <%_ } _%>
    });

    it('should create an instance of <%= entityClass %>', () => {
      cy.getEntityCreateUpdateHeading('<%= entityClass %>');
  <%_ fields.filter(field => (!field.id || !field.autoGenerate) && !field.hidden).forEach((field) => {
    const fieldName = field.fieldName;
    const fieldNameCapitalized = field.fieldNameCapitalized;
    const fieldType = field.fieldType;
    const fieldTypeBlobContent = field.fieldTypeBlobContent;
    const fieldIsEnum = field.fieldIsEnum;
    const fieldValue = !entityFakeData ? field.generateFakeData('cypress') : entityFakeData[field.fieldName];
    if (fieldValue === undefined) {
        warning(`Error generating a value for field ${fieldName}`);
        return;
    }
  _%>

    <%_ if (field.fieldTypeBoolean) { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).should('not.be.checked');
    cy.get(`[data-cy="<%= fieldName %>"]`).click().should('be.checked');

    <%_ } else if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
    cy.setFieldImageAsBytesOfEntity('<%= fieldName %>', 'integration-test.png', 'image/png');

    <%_ } else if (fieldIsEnum) { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).select('<%= fieldValue %>');

    <%_ } else if (field.fieldTypeString || field.fieldTypeNumeric || field.fieldTypeLocalDate || field.fieldTypeTimed || field.fieldTypeDuration) { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).type('<%= fieldValue %>').should('have.value', '<%= fieldValue %>');

    <%_ } else { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).type('<%= fieldValue %>').invoke('val').should('match', new RegExp('<%= fieldValue %>'));

    <%_ } _%>
  <%_ }); _%>

  <%_ for (relationship of requiredRelationships) {
    const relationshipType = relationship.relationshipType;
    const ownerSide = relationship.ownerSide;
    const relationshipName = relationship.relationshipName;
    const relationshipFieldName = relationship.relationshipFieldName;
    const relationshipNameCapitalized = relationship.relationshipNameCapitalized;
  _%>
      cy.get(`[data-cy="<%= relationshipFieldName %>"]`).select('' + <%= relationshipName %>.<%= relationship.otherEntity.primaryKey.name %> + ': Object', {force: true}).should('have.value', <%= relationshipName %>.<%= relationship.otherEntity.primaryKey.name %>);
  <%_ } _%>

      cy.get(entityCreateSaveButtonSelector).click({force: true});
      cy.wait('@postEntityRequest').then(({ response }) => {
        expect(response.statusCode).to.equal(201);
        created<%= entityClass %> = response.body;
      });
      cy.wait('@entitiesRequest').then(({ response }) => {
        expect(response.statusCode).to.equal(200);
      });
      cy.url().should('match', /\/<%= entityUrl %>(\?.*)?$/);
    });
  });
<%_ } _%>
});
