import axios from 'axios';
import { Store } from 'vuex';
<%_ if (enableTranslation) { _%>
import TranslationService from '@/locale/translation.service';
<%_ } _%>

export default class AccountService {
  constructor(
    private store: Store<any>,
<%_ if (enableTranslation) { _%>
    private translationService: TranslationService,
<%_ } _%>
<%_ if (authenticationTypeSession || authenticationTypeOauth2) { _%>
    private cookie: any,
<%_ } _%>
  ) {
  }

  public async update(): Promise<void> {
    if (!this.store.getters.profilesLoaded) {
      await this.retrieveProfiles();
      this.store.commit('profilesLoaded');
    }
    await this.loadAccount();
  }

  public async retrieveProfiles(): Promise<boolean> {
    try {
      const res = await axios.get<any>('management/info');
      if (res.data && res.data.activeProfiles) {
        this.store.commit('setRibbonOnProfiles', res.data['display-ribbon-on-profiles']);
        this.store.commit('setActiveProfiles', res.data['activeProfiles']);
      }
      return true;
    } catch (error) {
      return false;
    }
  }

  public async retrieveAccount(): Promise<boolean> {
    try {
      const response = await axios.get<any>('api/account');
      if (response.status === 200 && response.data) {
        const account = response.data;
        this.store.commit('authenticated', account);
<%_ if (enableTranslation) { _%>
        if (this.store.getters.currentLanguage !== account.langKey) {
          this.store.commit('currentLanguage', account.langKey);
          this.translationService.refreshTranslation(this.store.getters.currentLanguage);
        }
<%_ } _%>
        return true;
      }
    } catch (error) {}

    this.store.commit('logout');
    return false;
  }

  public async loadAccount() {
    if (this.store.getters.logon) {
      return this.store.getters.logon;
    }

    const token = localStorage.getItem('<%=jhiPrefixDashed %>-authenticationToken') || sessionStorage.getItem('<%=jhiPrefixDashed %>-authenticationToken');
    if (this.authenticated && this.userAuthorities && token) {
      return;
    }

    const promise = this.retrieveAccount();
    this.store.commit('authenticate', promise);
    return await promise;
  }

  public async hasAnyAuthorityAndCheckAuth(authorities: any): Promise<boolean> {
    if (typeof authorities === 'string') {
      authorities = [authorities];
    }

    return this.checkAuthorities(authorities);
  }

  public get authenticated(): boolean {
    return this.store.getters.authenticated;
  }

  public get userAuthorities(): string[] {
    return this.store.getters.account?.authorities;
  }

  private checkAuthorities(authorities: string[]): boolean {
    if (this.userAuthorities) {
      for (const authority of authorities) {
        if (this.userAuthorities.includes(authority)) {
          return true;
        }
      }
    }
    return false;
  }
}
