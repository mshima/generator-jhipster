import { useLogin } from './login';
<%_ if (authenticationTypeSession) { _%>
import { createTestingPinia } from '@pinia/testing';
<%_ } _%>
<%_ if (!authenticationTypeJwt) { _%>
import axios from 'axios';
import sinon from 'sinon';

const axiosStub = {
  get: sinon.stub(axios, 'get'),
  post: sinon.stub(axios, 'post'),
};
<%_ } _%>

describe('Login test suite', () => {
  let login: ReturnType<typeof useLogin>;

  beforeEach(() => {
<%_ if (authenticationTypeSession) { _%>
createTestingPinia();
<%_ } _%>
    login = useLogin();
  });

<%_ if (authenticationTypeOauth2) { _%>
  it('should build url for login', () => {
    const loc = { href: '', hostname: 'localhost', pathname: '/' };

    login.login(loc);

    expect(loc.href).toBe('//localhost/oauth2/authorization/oidc');
  });

  it('should build url for login with loc.pathname equals to /accessdenied', () => {
    const loc = { href: '', hostname: 'localhost', pathname: '/accessdenied' };

    login.login(loc);

    expect(loc.href).toBe('//localhost/oauth2/authorization/oidc');
  });

  it('should build url for login with loc.pathname equals to /forbidden', () => {
    const loc = { href: '', hostname: 'localhost', pathname: '/forbidden' };

    login.login(loc);

    expect(loc.href).toBe('//localhost/oauth2/authorization/oidc');
  });

  it('should build url for login with loc.pathname equals to /accessdenied', () => {
    const loc = { href: '', hostname: 'localhost', pathname: '/accessdenied' };

    login.login(loc);

    expect(loc.href).toBe('//localhost/oauth2/authorization/oidc');
  });

  it('should build url for login with loc.pathname equals to /forbidden', () => {
    const loc = { href: '', hostname: 'localhost', pathname: '/forbidden' };

    login.login(loc);

    expect(loc.href).toBe('//localhost/oauth2/authorization/oidc');
  });

  it('should build url for login behind client proxy', () => {
    const loc = {href: '', port: '<%= serverPort %>', hostname: 'localhost', pathname: '/'};

    login.login(loc);

    expect(loc.href).toBe('//localhost:<%= serverPort %>/oauth2/authorization/oidc');
  });
<%_ } _%>

<%_ if (!authenticationTypeJwt) { _%>
  it('should call global logout when asked to', () => {
    login.logout();

    expect(axiosStub.post.calledWith('api/logout')).toBeTruthy();
  });
<%_ } _%>
});
