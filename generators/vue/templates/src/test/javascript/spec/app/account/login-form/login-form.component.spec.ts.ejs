import { shallowMount, createLocalVue } from '@vue/test-utils';
import axios from 'axios';
import sinon from 'sinon';
import VueRouter from 'vue-router';

import AccountService from '@/account/account.service';

import { useStore } from '@/store';
<%_ if (enableTranslation) { _%>
import { initI18N } from '@/shared/config/config';
<%_ } _%>
import LoginForm from '@/account/login-form/login-form.vue';
import type LoginFormComponent from '@/account/login-form/login-form.component';

type LoginFormComponentType = Vue & InstanceType<typeof LoginFormComponent>;

const localVue = createLocalVue();
localVue.use(VueRouter);

localVue.component('b-alert', {});
localVue.component('b-button', {});
localVue.component('b-form', {});
localVue.component('b-form-input', {});
localVue.component('b-form-group', {});
localVue.component('b-form-checkbox', {});
localVue.component('b-link', {});

<%_ if (enableTranslation) { _%>
const i18n = initI18N(localVue);
<%_ } _%>
const store = useStore();

const axiosStub = {
  get: sinon.stub(axios, 'get'),
  post: sinon.stub(axios, 'post'),
};

describe('LoginForm Component', () => {
  let loginForm: LoginFormComponentType;
  let router: VueRouter;

  beforeEach(() => {
    axiosStub.get.resolves({});
    axiosStub.post.reset();
    router = new VueRouter({
      routes: [
        {
          path: '/',
        },
      ],
    });
    router.push('/');

    const wrapper = shallowMount<LoginFormComponentType>(LoginForm,
      {
        store,
        <%_ if (enableTranslation) { _%>
        i18n,
        <%_ } _%>
        localVue,
        router,
        provide: {
          accountService: new AccountService(store)
        }
      });
    loginForm = wrapper.vm;
  });

<%_ if (authenticationTypeJwt) { _%>
  it('should not store token if authentication is KO', async () => {
    // GIVEN
    loginForm.login = 'login';
    loginForm.password = 'pwd';
    loginForm.rememberMe = true;
    axiosStub.post.rejects();

    // WHEN
    loginForm.doLogin();
    await loginForm.$nextTick();

    // THEN
    expect(axiosStub.post.calledWith('api/authenticate', {
      username: 'login',
      password: 'pwd',
      rememberMe: true
    })).toBeTruthy();
    await loginForm.$nextTick();
    expect(loginForm.authenticationError).toBeTruthy();
  });

  it('should store token if authentication is OK', async () => {
    // GIVEN
    loginForm.login = 'login';
    loginForm.password = 'pwd';
    loginForm.rememberMe = true;
    const jwtSecret = 'jwt-secret';
    axiosStub.post.resolves({ headers: { authorization: 'Bearer ' + jwtSecret } });

    // WHEN
    loginForm.doLogin();
    await loginForm.$nextTick();

    // THEN
    expect(axiosStub.post.calledWith('api/authenticate', {
      username: 'login',
      password: 'pwd',
      rememberMe: true
    })).toBeTruthy();

    expect(loginForm.authenticationError).toBeFalsy();
    expect(localStorage.getItem('<%=jhiPrefixDashed %>-authenticationToken')).toEqual(jwtSecret);
  });

  it('should store token if authentication is OK in session', async () => {
    // GIVEN
    loginForm.login = 'login';
    loginForm.password = 'pwd';
    loginForm.rememberMe = false;
    const jwtSecret = 'jwt-secret';
    axiosStub.post.resolves({ headers: { authorization: 'Bearer ' + jwtSecret } });

    // WHEN
    loginForm.doLogin();
    await loginForm.$nextTick();

    // THEN
    expect(axiosStub.post.calledWith('api/authenticate', {
      username: 'login',
      password: 'pwd',
      rememberMe: false
    })).toBeTruthy();

    expect(loginForm.authenticationError).toBeFalsy();
    expect(sessionStorage.getItem('<%=jhiPrefixDashed %>-authenticationToken')).toEqual(jwtSecret);
  });
<%_ } else { _%>
  it('should authentication be KO', async () => {
    // GIVEN
    loginForm.login = 'login';
    loginForm.password = 'pwd';
    loginForm.rememberMe = true;
    axiosStub.post.rejects();

    // WHEN
    loginForm.doLogin();
    await loginForm.$nextTick();

    // THEN
    expect(axiosStub.post.calledWith('api/authentication',
      'username=login&password=pwd&remember-me=true&submit=Login',
      { "headers": { "Content-Type": "application/x-www-form-urlencoded" } })).toBeTruthy();
    await loginForm.$nextTick();
    expect(loginForm.authenticationError).toBeTruthy();
  });

  it('should authentication be OK', async () => {
    // GIVEN
    loginForm.login = 'login';
    loginForm.password = 'pwd';
    loginForm.rememberMe = true;
    axiosStub.post.resolves({});

    // WHEN
    loginForm.doLogin();
    await loginForm.$nextTick();

    // THEN
    expect(axiosStub.post.calledWith('api/authentication',
      'username=login&password=pwd&remember-me=true&submit=Login',
      { "headers": { "Content-Type": "application/x-www-form-urlencoded" } })).toBeTruthy();

    expect(loginForm.authenticationError).toBeFalsy();
  });
<%_ } _%>

});
