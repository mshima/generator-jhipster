<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { WritableSignal } from '@angular/core';
import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';
<%_ if (enableTranslation) { _%>
import { TranslateModule } from '@ngx-translate/core';
<%_ } _%>

<%_ if (enableTranslation) { _%>
import TranslateDirective from 'app/shared/language/translate.directive';
<%_ } _%>

import { ItemCountComponent } from './item-count.component';
import { type PaginationState, paginationStateSignal } from './pagination-state';

describe('ItemCountComponent test', () => {
  let comp: ItemCountComponent;
  let fixture: ComponentFixture<ItemCountComponent>;
  let paginationState: WritableSignal<PaginationState>;

  beforeEach(
    waitForAsync(() => {
      TestBed.configureTestingModule({
        imports: [
          ItemCountComponent,
<%_ if (enableTranslation) { _%>
          TranslateModule.forRoot(),
          TranslateDirective,
<%_ } _%>
        ],
      }).compileComponents();
    })
  );

  beforeEach(() => {
    fixture = TestBed.createComponent(ItemCountComponent);
    comp = fixture.componentInstance;
    paginationState = paginationStateSignal();
    comp.paginationState = paginationState;
  });

  describe('UI logic tests', () => {
    describe('when state is invalid', () => {
      it('invalid page', () => {
        // GIVEN
        paginationState.set({ page: 0, totalItems: 0, itemsPerPage: 10 });

        // THEN
        expect(comp.first()).toBeUndefined();
        expect(comp.until()).toBeUndefined();
      });
      it('should set the until value', () => {
        // GIVEN
        paginationState.set({ page: 1, totalItems: 100, itemsPerPage: 0 });

        // THEN
        expect(comp.first()).toBeUndefined();
        expect(comp.until()).toBeUndefined();
      });
    });

    describe('when state is valid', () => {
      it('should set the until number to the max item of current page', () => {
        // GIVEN
        paginationState.set({ page: 2, totalItems: 100, itemsPerPage: 10 });

        // THEN
        expect(comp.first()).toBe(11);
        expect(comp.until()).toBe(20);
      });
      it('should set the until number to totalItems if this is the last page which contains less than itemsPerPage items', () => {
        // GIVEN
        paginationState.set({ page: 2, totalItems: 16, itemsPerPage: 10 });

        // THEN
        expect(comp.first()).toBe(11);
        expect(comp.until()).toBe(16);
      });
    });
  });
});
