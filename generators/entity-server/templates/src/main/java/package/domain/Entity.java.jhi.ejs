<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<&_
 // Register sections 0 for unlimited childs, 1 for only one child.
  partials.registerSections({
    partialImportSection: 0,
    partialStaticImportSection: 0,
    partialAnnotationSection: 0,
    partialClassStaticFieldsSection: 0,
    partialClassFieldsSection: 0,
    partialClassAdditionalFieldsSection: 0,
    partialClassAdditionalFieldsMethodsSection: 0,
    partialClassAdditionalRelationshipsSection: 0,
    partialClassAdditionalRelationshipsMethodsSection: 0,
<%_ for (const field of fields) { _%>
    partialField<%- field.fieldNameCapitalized %>AnnotationSection: 0,
  <%_ if (field.fieldWithContentType) { _%>
    partialField<%- field.fieldNameCapitalized %>ContentTypeAnnotationSection: 0,
  <%_ } _%>
    partialField<%- field.fieldNameCapitalized %>CustomSetSection: 1,
<%_ } _%>
<%_ for (const relationship of relationships) { _%>
    partialRelationship<%- relationship.relationshipNameCapitalized %>AnnotationSection: 0,
    partialRelationship<%- relationship.relationshipNameCapitalized %>CustomSetSection: 1,
    partialRelationship<%- relationship.relationshipNameCapitalized %>CustomAddSection: 1,
    partialRelationship<%- relationship.relationshipNameCapitalized %>CustomRemoveSection: 1,
<%_ } _%>
  });
-&>
package <%= packageName %>.domain;

<&- partials.partialStaticImportSection() -&>
<&- partials.partialImportSection() -&>
<%_ if (relationshipsContainOtherSideIgnore) { _%>
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
<%_ } _%>
<%_ if (!dtoMapstruct && typeof javadoc != 'undefined') { _%>
import io.swagger.annotations.ApiModel;
<%_ } _%>
<%_ if (!dtoMapstruct && importApiModelProperty) { _%>
import io.swagger.annotations.ApiModelProperty;
<%_ } _%>

import java.io.Serializable;
<%_ if (fieldsContainBigDecimal) { _%>
import java.math.BigDecimal;
<%_ } if (fieldsContainInstant) { _%>
import java.time.Instant;
<%_ } if (fieldsContainLocalDate) { _%>
import java.time.LocalDate;
<%_ } if (fieldsContainZonedDateTime) { _%>
import java.time.ZonedDateTime;
<%_ } if (fieldsContainDuration) { _%>
import java.time.Duration;
<%_ } if (entityContainsCollectionField) { _%>
import java.util.HashSet;
import java.util.Set;
<%_ } _%>
<%_ if (fieldsContainUUID) { _%>
import java.util.UUID;
<%_ }
Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%= packageName %>.domain.enumeration.<%= element %>;
<%_ }); _%>

<%_ if (typeof javadoc == 'undefined') { _%>
/**
 * A <%= persistClass %>.
 */
<%_ } else { _%>
<%- formatAsClassJavadoc(javadoc) %>
  <%_ if (!dtoMapstruct) { _%>
@ApiModel(description = "<%- formatAsApiDescription(javadoc) %>")
  <%_ } _%>
<%_ } _%>
<&- partials.partialAnnotationSection() -&>
public class <%= persistClass %> implements Serializable {

    private static final long serialVersionUID = 1L;

<%_ if (!embedded && primaryKey.composite) { _%>
    @Id
    private <%= primaryKey.type %> <%= primaryKey.name %>;

<%_ } _%>
<&- partials.partialClassStaticFieldsSection() -&>
<&- partials.partialClassFieldsSection() -&>
<%_ for (const field of fields.filter(field => !field.transient && (embedded || !field.id || !primaryKey.composite))) { _%>
  <%_ if (typeof field.javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(field.javadoc) %>
  <%_ } _%>
  <%_ if (!dtoMapstruct && typeof field.javadoc != 'undefined') { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(field.javadoc) %>"<% if (field.fieldValidationRequired) { %>, required = true<% } %>)
  <%_ } _%>
<&- partials.partialField<%- field.fieldNameCapitalized %>AnnotationSection() -&>
    private <%= field.javaFieldType %> <%= field.fieldName %>;

  <%_ if (field.fieldWithContentType) { _%>
<&- partials.partialField<%- field.fieldNameCapitalized %>ContentTypeAnnotationSection() -&>
    private String <%= field.fieldName %>ContentType;

  <%_ } _%>
<%_ } _%>
<&- partials.partialClassAdditionalFieldsSection() -&>

<%_
// An embedded entity should not reference entities that embeds it, unless the other entity is also embedded
for (relationship of relationships.filter(relationship => !relationship.embedded || relationship.otherEntity.embedded || relationship.ownerSide)) {
  if (typeof relationship.javadoc != 'undefined') { _%>
<%- formatAsFieldJavadoc(relationship.javadoc) %>
    <%_ if (!dtoMapstruct) { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(relationship.javadoc) %>")
    <%_ } _%>
  <%_ } _%>
<&- partials.partialRelationship<%- relationship.relationshipNameCapitalized %>AnnotationSection() -&>
  <%_ if (relationship.relationshipOneToMany) { _%>
    <%_ if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = {
        <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
        <%_ }); _%>
    }, allowSetters = true)
    <%_ } _%>
    private Set<<%= relationship.otherEntity.persistClass %>> <%= relationship.relationshipFieldNamePlural %> = new HashSet<>();

  <%_ } else if (relationship.relationshipManyToOne) { _%>
    <%_ if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = {
      <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
      <%_ }); _%>
    }, allowSetters = true)
    <%_ } _%>
    private <%= relationship.otherEntity.persistClass %> <%= relationship.relationshipFieldName %>;

  <%_ } else if (relationship.relationshipManyToMany) { _%>
    <%_ if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = {
      <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
      <%_ }); _%>
    }, allowSetters = true)
    <%_ } _%>
    private Set<<%= relationship.otherEntity.persistClass %>> <%= relationship.relationshipFieldNamePlural %> = new HashSet<>();

  <%_ } else { _%>
    private <%= relationship.otherEntity.persistClass %> <%= relationship.relationshipFieldName %>;
  <%_ } _%>

<%_ }; _%>
<&- partials.partialClassAdditionalRelationshipsSection() -&>
    // jhipster-needle-entity-add-field - JHipster will add fields here
<%_ for (const field of fields.filter(field => !field.transient)) { _%>

    public <%= field.javaFieldType %> get<%= field.fieldInJavaBeanMethod %>() {
        return this.<%= field.fieldName %>;
    }
  <%_ if (fluentMethods) { _%>

    public <%= persistClass %> <%= field.fieldName %>(<%= field.javaFieldType %> <%= field.fieldName %>) {
        this.set<%= field.fieldInJavaBeanMethod %>(<%= field.fieldName %>);
        return this;
    }
  <%_ } _%>

<&- partials.partialField<%- field.fieldNameCapitalized %>CustomSetSection() -&>
<&_ if (!partials.partialField<%- field.fieldNameCapitalized %>CustomSetSection()) { -&>
    public void set<%= field.fieldInJavaBeanMethod %>(<%= field.javaFieldType %> <%= field.fieldName %>) {
        this.<%= field.fieldName %> = <%= field.fieldName %>;
    }
<&_ } -&>
  <%_ if (field.fieldWithContentType) { _%>

    public String get<%= field.fieldInJavaBeanMethod %>ContentType() {
        return this.<%= field.fieldName %>ContentType;
    }
    <%_ if (fluentMethods) { _%>

    public <%= persistClass %> <%= field.fieldName %>ContentType(String <%= field.fieldName %>ContentType) {
        this.<%= field.fieldName %>ContentType = <%= field.fieldName %>ContentType;
        return this;
    }
    <%_ } _%>

    public void set<%= field.fieldInJavaBeanMethod %>ContentType(String <%= field.fieldName %>ContentType) {
        this.<%= field.fieldName %>ContentType = <%= field.fieldName %>ContentType;
    }
  <%_ } _%>
<%_ } _%>

<&- partials.partialClassAdditionalFieldsMethodsSection('\n\n') -&>
<%_
for (const relationship of relationships) {
  // An embedded entity should not reference entities that embeds it, unless the other entity is also embedded
  if (embedded && !relationship.otherEntity.embedded && !relationship.ownerSide) {
    continue;
  }
_%>
  <%_ if (relationship.collection) { _%>
    public Set<<%= relationship.otherEntity.persistClass %>> get<%= relationship.relationshipNameCapitalizedPlural %>() {
        return this.<%= relationship.relationshipFieldNamePlural %>;
    }

  <%_ } else { _%>
    public <%= relationship.otherEntity.persistClass %> get<%= relationship.relationshipNameCapitalized %>() {
        return this.<%= relationship.relationshipFieldName %>;
    }

  <%_ } _%>
<&- partials.partialRelationship<%- relationship.relationshipNameCapitalized %>CustomSetSection() -&>
<&_ if (!partials.partialRelationship<%- relationship.relationshipNameCapitalized %>CustomSetSection()) { -&>
  <%_ if (relationship.collection) { _%>
    public void set<%= relationship.relationshipNameCapitalizedPlural %>(Set<<%= relationship.otherEntity.persistClass %>> <%= relationship.otherEntityNamePlural %>) {
    <%_ if (relationship.otherRelationship && !relationship.reference.owned) { _%>
        if (this.<%= relationship.relationshipFieldNamePlural %> != null) {
      <%_ if (relationship.otherRelationship.reference.collection) { _%>
            this.<%= relationship.relationshipFieldNamePlural %>.forEach(i -> i.remove<%= relationship.otherRelationship.relationshipNameCapitalized %>(this));
      <%_ } else { _%>
            this.<%= relationship.relationshipFieldNamePlural %>.forEach(i -> i.set<%= relationship.otherRelationship.relationshipNameCapitalized %>(null));
      <%_ } _%>
        }
        if (<%= relationship.otherEntityNamePlural %> != null) {
      <%_ if (relationship.otherRelationship.reference.collection) { _%>
            <%= relationship.otherEntityNamePlural %>.forEach(i -> i.add<%= relationship.otherRelationship.relationshipNameCapitalized %>(this));
      <%_ } else { _%>
            <%= relationship.otherEntityNamePlural %>.forEach(i -> i.set<%= relationship.otherRelationship.relationshipNameCapitalized %>(this));
      <%_ } _%>
        }
    <%_ } _%>
        this.<%= relationship.relationshipFieldNamePlural %> = <%= relationship.otherEntityNamePlural %>;
    }
  <%_ } else { _%>
    public void set<%= relationship.relationshipNameCapitalized %>(<%= relationship.otherEntity.persistClass %> <%= relationship.otherEntityName %>) {
    <%_ if (relationship.otherRelationship && !relationship.reference.owned) { _%>
        if (this.<%= relationship.relationshipFieldName %> != null) {
      <%_ if (relationship.otherRelationship.reference.collection) { _%>
            this.<%= relationship.relationshipFieldName %>.remove<%= relationship.otherRelationship.relationshipNameCapitalized %>(this);
      <%_ } else { _%>
            this.<%= relationship.relationshipFieldName %>.set<%= relationship.otherRelationship.relationshipNameCapitalized %>(null);
      <%_ } _%>
        }
        if (<%= relationship.otherEntityName %> != null) {
      <%_ if (relationship.otherRelationship.reference.collection) { _%>
            <%= relationship.otherEntityName %>.add<%= relationship.otherRelationship.relationshipNameCapitalized %>(this);
      <%_ } else { _%>
            <%= relationship.otherEntityName %>.set<%= relationship.otherRelationship.relationshipNameCapitalized %>(this);
      <%_ } _%>
        }
    <%_ } _%>
        this.<%= relationship.relationshipFieldName %> = <%= relationship.otherEntityName %>;
    }
  <%_ } _%>
<&_ } -&>
    <%_ if (fluentMethods) { _%>
      <%_ if (relationship.collection) { _%>

    public <%= persistClass %> <%= relationship.relationshipFieldNamePlural %>(Set<<%= relationship.otherEntity.persistClass %>> <%= relationship.otherEntityNamePlural %>) {
        this.set<%= relationship.relationshipNameCapitalizedPlural %>(<%= relationship.otherEntityNamePlural %>);
        return this;
    }

<&- partials.partialRelationship<%- relationship.relationshipNameCapitalized %>CustomAddSection() -&>
<&_ if (!partials.partialRelationship<%- relationship.relationshipNameCapitalized %>CustomAddSection()) { -&>
    public <%= persistClass %> add<%= relationship.relationshipNameCapitalized %>(<%= relationship.otherEntity.persistClass %> <%= relationship.otherEntityName %>) {
        this.<%= relationship.relationshipFieldNamePlural %>.add(<%= relationship.otherEntityName %>);
      <%_ if (!relationship.otherEntity.embedded || embedded && relationship.ownerSide) { _%>
        <%_ if (relationship.otherRelationship) { _%>
          <%_ if (!relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.set<%= relationship.otherRelationship.relationshipNameCapitalized %>(this);
          <%_ } else if (relationship.otherRelationship.relationshipNamePlural && !relationship.otherEntityUser && relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.get<%= relationship.otherRelationship.relationshipNameCapitalizedPlural %>().add(this);
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>
        return this;
    }
<&_ } -&>

<&- partials.partialRelationship<%- relationship.relationshipNameCapitalized %>CustomRemoveSection() -&>
<&_ if (!partials.partialRelationship<%- relationship.relationshipNameCapitalized %>CustomRemoveSection()) { -&>
    public <%= persistClass %> remove<%= relationship.relationshipNameCapitalized %>(<%= relationship.otherEntity.persistClass %> <%= relationship.otherEntityName %>) {
        this.<%= relationship.relationshipFieldNamePlural %>.remove(<%= relationship.otherEntityName %>);
      <%_ if (!relationship.otherEntity.embedded || (embedded && relationship.ownerSide)) { _%>
        <%_ if (relationship.otherRelationship) { _%>
          <%_ if (!relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.set<%= relationship.otherRelationship.relationshipNameCapitalized %>(null);
          <%_ } else if (!relationship.otherEntityUser && relationship.otherRelationship.collection) { _%>
        <%= relationship.otherEntityName %>.get<%= relationship.otherRelationship.relationshipNameCapitalizedPlural %>().remove(this);
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>
        return this;
    }
<&_ } -&>
      <%_ } else { _%>

    public <%= persistClass %> <%= relationship.relationshipFieldName %>(<%= relationship.otherEntity.persistClass %> <%= relationship.otherEntityName %>) {
        this.set<%= relationship.relationshipNameCapitalized %>(<%= relationship.otherEntityName %>);
        return this;
    }
      <%_ } _%>
    <%_ } _%>

<%_ } _%>
<&- partials.partialClassAdditionalRelationshipsMethodsSection() -&>
    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof <%= persistClass %>)) {
            return false;
        }
<%_ if (!embedded) { _%>
        return <%= primaryKey.name %> != null && <%= primaryKey.name %>.equals(((<%= persistClass %>) o).<%= primaryKey.name %>);
<%_ } else { _%>
        return false;
<%_ } _%>
    }

    @Override
    public int hashCode() {
        // see https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
        return getClass().hashCode();
    }

    // prettier-ignore
    @Override
    public String toString() {
        return "<%= persistClass %>{" +
<%_ if (!embedded) { _%>
            "<%= primaryKey.name %>=" + get<%= primaryKey.nameCapitalized %>() +
<%_ } _%>
<%_ for (const field of fields.filter(field => !field.id && !field.transient)) {
  const isNumeric = field.fieldTypeNumeric; _%>
            ", <%= field.fieldName %>=<% if (! isNumeric) { %>'<% } %>" + get<%= field.fieldInJavaBeanMethod %>() <% if (! isNumeric) { %>+ "'" <% } %>+
  <%_ if (field.fieldWithContentType) { _%>
            ", <%= field.fieldName %>ContentType='" + get<%= field.fieldInJavaBeanMethod %>ContentType() + "'" +
  <%_ } _%>
<%_ } _%>
<%_ for (const relationship of relationships) { _%>
  <%_ if (relationship.otherEntity.embedded) {
    if (relationship.relationshipManyToOne) { _%>
            ", <%= relationship.relationshipFieldNamePlural %>='" + get<%= relationship.relationshipNameCapitalizedPlural %>() + "'" +
    <%_ } else if (relationship.relationshipOneToOne && relationship.ownerSide) { _%>
            ", <%= relationship.relationshipFieldName %>='" + get<%= relationship.relationshipNameCapitalized %>() + "'" +
    <%_ } _%>
  <%_ } _%>
<%_ } _%>
            "}";
    }
}
